[{"/Users/barco/Desktop/sites/tests/dnd-tests/test6/client/src/index.js":"1","/Users/barco/Desktop/sites/tests/dnd-tests/test6/client/src/reportWebVitals.js":"2","/Users/barco/Desktop/sites/tests/dnd-tests/test6/client/src/Set/bridge.js":"3","/Users/barco/Desktop/sites/tests/dnd-tests/test6/client/src/Set/data.js":"4","/Users/barco/Desktop/sites/tests/dnd-tests/test6/client/src/Set/state-model.js":"5","/Users/barco/Desktop/sites/tests/dnd-tests/test6/client/src/Set/StateCreator.jsx":"6","/Users/barco/Desktop/sites/tests/dnd-tests/test6/client/src/Set/set-controls.jsx":"7","/Users/barco/Desktop/sites/tests/dnd-tests/test6/client/src/Set/Set.js":"8","/Users/barco/Desktop/sites/tests/dnd-tests/test6/client/src/App.js":"9","/Users/barco/Desktop/sites/tests/dnd-tests/test6/client/src/Home/Home.js":"10","/Users/barco/Desktop/sites/tests/dnd-tests/test6/client/src/Nav/Nav.js":"11","/Users/barco/Desktop/sites/tests/dnd-tests/test6/client/src/Auth/Login.jsx":"12","/Users/barco/Desktop/sites/tests/dnd-tests/test6/client/src/Auth/Signup.jsx":"13","/Users/barco/Desktop/sites/tests/dnd-tests/test6/client/src/About/About.js":"14","/Users/barco/Desktop/sites/tests/dnd-tests/test6/client/src/Tutorials/Tutorials.js":"15","/Users/barco/Desktop/sites/tests/dnd-tests/test6/client/src/Community/Community.js":"16"},{"size":264,"mtime":1608076568560,"results":"17","hashOfConfig":"18"},{"size":362,"mtime":1607622081591,"results":"19","hashOfConfig":"18"},{"size":2702,"mtime":1608059803752,"results":"20","hashOfConfig":"18"},{"size":119,"mtime":1608059803899,"results":"21","hashOfConfig":"18"},{"size":1773,"mtime":1608059872038,"results":"22","hashOfConfig":"18"},{"size":6997,"mtime":1608059872262,"results":"23","hashOfConfig":"18"},{"size":3888,"mtime":1608059871790,"results":"24","hashOfConfig":"18"},{"size":5136,"mtime":1608073243064,"results":"25","hashOfConfig":"18"},{"size":1058,"mtime":1608080790066,"results":"26","hashOfConfig":"18"},{"size":358,"mtime":1608080243345,"results":"27","hashOfConfig":"18"},{"size":1447,"mtime":1608080668995,"results":"28","hashOfConfig":"18"},{"size":3291,"mtime":1608088238622,"results":"29","hashOfConfig":"18"},{"size":3189,"mtime":1608088862803,"results":"30","hashOfConfig":"18"},{"size":190,"mtime":1608080562923,"results":"31","hashOfConfig":"18"},{"size":204,"mtime":1608080582576,"results":"32","hashOfConfig":"18"},{"size":203,"mtime":1608080800876,"results":"33","hashOfConfig":"18"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1ch6i9t",{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"38"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"38"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"53","messages":"54","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"55","messages":"56","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/barco/Desktop/sites/tests/dnd-tests/test6/client/src/index.js",[],"/Users/barco/Desktop/sites/tests/dnd-tests/test6/client/src/reportWebVitals.js",[],["69","70"],"/Users/barco/Desktop/sites/tests/dnd-tests/test6/client/src/Set/bridge.js",["71"],"import axios from 'axios';\nimport { set } from './data';\nimport Light from './state-model';\n\nlet bridgeUser = \"8SdmTqNxhLaIgHo28qv5JCeAjbsby0Hl7W9-jmKI\";\nlet bridgeIp = '';\n\nconst getBridgeIP = () => {\n    return axios.get('https://discovery.meethue.com').then(res => {\n        bridgeIp = res.data[0].internalipaddress\n        return res.data[0].internalipaddress\n    })\n}\n\nconst connectToBridge = (ip, user) => {\n  if(user) {\n      axios.get(`http://${ip}/api/${user}`).then(res => {\n      })\n  } else {\n      createUser(ip).then(res => {\n        axios.get(`http://${ip}/api/${res}`).then(res => {\n          console.log(res);\n        })\n      });\n  }\n}\n\nconst createUser = (ip) => {\n\n  let request = new Promise((resolve, reject) => {\n\n    let requestsMade = 0;\n    \n    let bridgeRequest = setInterval(()=>{\n      axios.post(`http://${ip}/api`, {devicetype: \"hue-stage-wep-app\"})\n        .then(res => {\n          if (!res.data[0].error) {\n            resolve(res.data[0].success.username);\n            requestsMade += 1;\n            clearInterval(bridgeRequest);\n          } else {\n            console.log(res.data[0].error)\n          }\n      }).catch(err => {\n        console.log(err);\n      })\n  \n      if(requestsMade > 15) {\n        reject('Unable to create user')\n        clearInterval(bridgeRequest);\n      }\n      \n    }, 2000);\n\n  })\n\n  return request;\n\n}\n\nexport const bridge = {\n    connect: async () => {\n        await getBridgeIP().then(ip => {\n            connectToBridge(ip, bridgeUser)\n        })\n    },\n\n    send(light, state) {\n        axios.put(`http://${bridgeIp}/api/${bridgeUser}/lights/${light}/state`, state)\n        .then(res => {\n            //console.log(res);\n        })\n    },\n\n    // sendMultiple() {\n    //   axios.put(`http://${bridgeIp}/api/${bridgeUser}/lights/${light}/state`, state)\n    //     .then(res => {\n    //         console.log(res);\n    //     })\n\n    // },\n\n    getLights: async () => {\n\n        let reachableLights = [];\n\n        await axios.get(`http://${bridgeIp}/api/${bridgeUser}/lights/`).then(res => {\n\n            let lights = Object.entries(res.data);\n            lights.map(light => {\n                if(light[1].state.reachable) {\n                    reachableLights.push(light);\n                }\n            })\n        })\n        \n        \n        return reachableLights;\n    },\n\n    loadLights() {\n\n        let reachableLights = [] \n        return this.getLights().then(res => {\n            reachableLights = res;\n            reachableLights.map(light => {\n                set.push(new Light(light[0], light[1].name, light[1].uniqueid, []))\n                return null;\n            })\n            return true;\n        })\n\n        \n    }\n\n\n}\n","/Users/barco/Desktop/sites/tests/dnd-tests/test6/client/src/Set/data.js",[],"/Users/barco/Desktop/sites/tests/dnd-tests/test6/client/src/Set/state-model.js",[],"/Users/barco/Desktop/sites/tests/dnd-tests/test6/client/src/Set/StateCreator.jsx",[],"/Users/barco/Desktop/sites/tests/dnd-tests/test6/client/src/Set/set-controls.jsx",["72","73","74","75"],"import React, {useState} from 'react';\nimport styled from 'styled-components';\nimport { set } from './data'\nimport { bridge } from './bridge'\n\n// play button\n// pause button\n// tempo\n\n// i.e. tempo = 140, beat happens at second measure (4 beats)\n\n// 1 measure has x beats\n// measure length in ms = /\n\n// tempo == beats in 60s\nlet tempo = 120;\nlet beatsPerMeasure = 4;\nlet beatValue = 4; // 1/4 (quarter)\n\n// get current time and every 50 ms check what objects have a play time before current time\n\n// after copying state and sending, delete those objects from the play time\n\n\n// render all states \n// when rendering states, make an array with objects\n// each object will have two properties, playTime and an array of all the states\n\n\n\n//disable all controls and dnd interface\n\n/*\n\n\n*/\n\nconst SetControls = () => {\n    \n\n    let stopButtonPressed = {state: false};\n    let [stopped, setStopped] = useState(false);\n    let [playing, setPlaying] = useState(false);\n    console.log(stopped);\n    \n    const play = () => {\n\n        if(!playing) {\n\n            setPlaying(true);\n\n            let playerQueues = [];\n        \n            set.map(light => {\n\n                let millisecondOcurrence = 0;\n\n                light.gridStates.map(state => {\n\n                    let millisecondDuration = ((60000/tempo) * beatsPerMeasure) * state.duration\n                    \n                    playerQueues.push({\n                        occurrenceTime: millisecondOcurrence,\n                        properties: {\n                            state: state,\n                            bridgeIndex: light.bridgeIndex\n                        }\n                    })\n                    \n                    millisecondOcurrence += millisecondDuration;\n\n                })\n\n            })\n\n            let startTime = new Date()\n\n            let player = setInterval(()=>{\n\n                let currentTime = new Date()\n                let elapsedTime = currentTime - startTime;\n                let queueCopy = [...playerQueues]\n\n                let messages = queueCopy.filter(state => {\n                    return state.occurrenceTime <= elapsedTime\n                });\n\n                messages.map(message => {\n                    bridge.send(message.properties.bridgeIndex, message.properties.state.data())\n                    //console.log(message.properties.state, message.properties.bridgeIndex)\n                })\n                \n                playerQueues = queueCopy.filter(state => state.occurrenceTime > elapsedTime );\n\n\n                console.log(stopButtonPressed.state)\n\n                if(playerQueues.length === 0 || stopButtonPressed.state) {\n                    stopButtonPressed.state = false;\n                    setPlaying(false);\n                    setStopped(false);\n                    clearInterval(player);\n                }\n\n            }, 50)\n\n        } \n\n    }\n\n    const stop = () => {\n\n        if(!stopped) {\n\n            stopButtonPressed.state = true;\n            setStopped(true);\n            console.log(stopped)\n            setPlaying(false);\n        }\n\n    }\n\n\n    return (\n        <Controls >\n            <Play playing={playing} onClick={play}/>\n            <Stop onClick={stop}/>\n        </Controls>\n    );\n};\n\nexport default SetControls;\n\nconst Controls = styled.div`\n    color: white; \n    display: flex;\n    justify-content: center;\n    align-items: center;\n`\n\nconst Play = styled.div`\n    width: 20px;\n    height: 20px;\n    margin: 20px;\n    transform: rotate(45deg);\n    cursor: pointer;\n    background-color: ${props => props.playing ? 'green' : 'white' };\n    :hover {\n        background-color: darkgreen;\n    }\n`\n\nconst Stop = styled.div`\n    width: 20px;\n    height: 20px;\n    margin: 20px;\n    cursor: pointer;\n    background-color: white;\n    :hover {\n        background-color: red;\n    }\n    :active {\n        background-color: darkred;\n    }\n`","/Users/barco/Desktop/sites/tests/dnd-tests/test6/client/src/Set/Set.js",["76"],"/Users/barco/Desktop/sites/tests/dnd-tests/test6/client/src/App.js",["77"],"/Users/barco/Desktop/sites/tests/dnd-tests/test6/client/src/Home/Home.js",["78"],"/Users/barco/Desktop/sites/tests/dnd-tests/test6/client/src/Nav/Nav.js",[],"/Users/barco/Desktop/sites/tests/dnd-tests/test6/client/src/Auth/Login.jsx",[],"/Users/barco/Desktop/sites/tests/dnd-tests/test6/client/src/Auth/Signup.jsx",[],"/Users/barco/Desktop/sites/tests/dnd-tests/test6/client/src/About/About.js",[],"/Users/barco/Desktop/sites/tests/dnd-tests/test6/client/src/Tutorials/Tutorials.js",[],"/Users/barco/Desktop/sites/tests/dnd-tests/test6/client/src/Community/Community.js",[],{"ruleId":"79","replacedBy":"80"},{"ruleId":"81","replacedBy":"82"},{"ruleId":"83","severity":1,"message":"84","line":90,"column":30,"nodeType":"85","messageId":"86","endLine":90,"endColumn":32},{"ruleId":"87","severity":1,"message":"88","line":18,"column":5,"nodeType":"89","messageId":"90","endLine":18,"endColumn":14},{"ruleId":"83","severity":1,"message":"84","line":54,"column":27,"nodeType":"85","messageId":"86","endLine":54,"endColumn":29},{"ruleId":"83","severity":1,"message":"84","line":58,"column":44,"nodeType":"85","messageId":"86","endLine":58,"endColumn":46},{"ruleId":"83","severity":1,"message":"84","line":88,"column":38,"nodeType":"85","messageId":"86","endLine":88,"endColumn":40},{"ruleId":"87","severity":1,"message":"91","line":190,"column":7,"nodeType":"89","messageId":"90","endLine":190,"endColumn":13},{"ruleId":"87","severity":1,"message":"92","line":12,"column":5,"nodeType":"89","messageId":"90","endLine":12,"endColumn":9},{"ruleId":"87","severity":1,"message":"93","line":2,"column":18,"nodeType":"89","messageId":"90","endLine":2,"endColumn":27},"no-native-reassign",["94"],"no-negated-in-lhs",["95"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","no-unused-vars","'beatValue' is assigned a value but never used.","Identifier","unusedVar","'setRef' is assigned a value but never used.","'Page' is assigned a value but never used.","'keyframes' is defined but never used.","no-global-assign","no-unsafe-negation"]