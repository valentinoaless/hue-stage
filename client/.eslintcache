[{"/Users/barco/Desktop/sites/tests/dnd-tests/test6/hue-stage/client/src/index.js":"1","/Users/barco/Desktop/sites/tests/dnd-tests/test6/hue-stage/client/src/App.js":"2","/Users/barco/Desktop/sites/tests/dnd-tests/test6/hue-stage/client/src/Home/Home.js":"3","/Users/barco/Desktop/sites/tests/dnd-tests/test6/hue-stage/client/src/Set/Set.js":"4","/Users/barco/Desktop/sites/tests/dnd-tests/test6/hue-stage/client/src/Community/Community.js":"5","/Users/barco/Desktop/sites/tests/dnd-tests/test6/hue-stage/client/src/About/About.js":"6","/Users/barco/Desktop/sites/tests/dnd-tests/test6/hue-stage/client/src/Tutorials/Tutorials.js":"7","/Users/barco/Desktop/sites/tests/dnd-tests/test6/hue-stage/client/src/Auth/Signup.jsx":"8","/Users/barco/Desktop/sites/tests/dnd-tests/test6/hue-stage/client/src/Auth/Login.jsx":"9","/Users/barco/Desktop/sites/tests/dnd-tests/test6/hue-stage/client/src/Set/StateCreator.jsx":"10","/Users/barco/Desktop/sites/tests/dnd-tests/test6/hue-stage/client/src/Set/set-controls.jsx":"11","/Users/barco/Desktop/sites/tests/dnd-tests/test6/hue-stage/client/src/Set/state-model.js":"12","/Users/barco/Desktop/sites/tests/dnd-tests/test6/hue-stage/client/src/Set/data.js":"13","/Users/barco/Desktop/sites/tests/dnd-tests/test6/hue-stage/client/src/Set/bridge.js":"14","/Users/barco/Desktop/sites/tests/dnd-tests/test6/hue-stage/client/src/Nav/Nav.js":"15","/Users/barco/Desktop/sites/tests/dnd-tests/test6/hue-stage/client/src/UserContext.js":"16","/Users/barco/Desktop/sites/tests/dnd-tests/test6/hue-stage/client/src/Dashboard/Dashboard.js":"17"},{"size":272,"mtime":1608161935954,"results":"18","hashOfConfig":"19"},{"size":2470,"mtime":1608238287093,"results":"20","hashOfConfig":"19"},{"size":5978,"mtime":1608225830043,"results":"21","hashOfConfig":"19"},{"size":5136,"mtime":1608073243064,"results":"22","hashOfConfig":"19"},{"size":334,"mtime":1608098370301,"results":"23","hashOfConfig":"19"},{"size":322,"mtime":1608098320663,"results":"24","hashOfConfig":"19"},{"size":334,"mtime":1608098425153,"results":"25","hashOfConfig":"19"},{"size":5939,"mtime":1608215910304,"results":"26","hashOfConfig":"19"},{"size":4691,"mtime":1608237577087,"results":"27","hashOfConfig":"19"},{"size":6997,"mtime":1608059872262,"results":"28","hashOfConfig":"19"},{"size":3843,"mtime":1608097882327,"results":"29","hashOfConfig":"19"},{"size":1773,"mtime":1608059872038,"results":"30","hashOfConfig":"19"},{"size":119,"mtime":1608059803899,"results":"31","hashOfConfig":"19"},{"size":2702,"mtime":1608059803752,"results":"32","hashOfConfig":"19"},{"size":4838,"mtime":1608244002856,"results":"33","hashOfConfig":"19"},{"size":86,"mtime":1608168238675,"results":"34","hashOfConfig":"19"},{"size":6477,"mtime":1608242555460,"results":"35","hashOfConfig":"19"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},"d7y8c2",{"filePath":"39","messages":"40","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"41","messages":"42","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"43","messages":"44","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"38"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"54","messages":"55","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"38"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"38"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/barco/Desktop/sites/tests/dnd-tests/test6/hue-stage/client/src/index.js",[],["74","75"],"/Users/barco/Desktop/sites/tests/dnd-tests/test6/hue-stage/client/src/App.js",["76","77"],"/Users/barco/Desktop/sites/tests/dnd-tests/test6/hue-stage/client/src/Home/Home.js",["78","79"],"/Users/barco/Desktop/sites/tests/dnd-tests/test6/hue-stage/client/src/Set/Set.js",["80"],"import React, { useState, useEffect } from 'react'\nimport { DragDropContext, Draggable, Droppable } from 'react-beautiful-dnd'\nimport { set, currentEditorState } from './data'\nimport StateCreator from './StateCreator.jsx'\nimport './Set.css'\nimport { bridge } from './bridge'\nimport SetControls from './set-controls.jsx'\nimport { State } from './state-model'\n\n// create a test button to test hue lights\n\nfunction Set() {\n\n  let setRef = set;\n  let [lines, setLines] = useState([...set])\n  let [didLoad, setDidLoad] = useState(false)\n\n  useEffect(() => {\n\n    bridge.connect().then(()=>{\n        bridge.loadLights().then(() => {\n            setDidLoad(true);\n            setLines([...set]);\n        }).catch(err => {\n          console.log(err);\n        })\n    })\n\n}, [])\n\n  \n  const HueState = (props) => {\n\n    const state = props.state\n\n    const style = {\n      backgroundColor: `hsl(${state.UIhue}, ${state.UIsat}%, ${(state.UIbri - state.UIsat*state.UIbri/200)}%)`,\n      height: '100px',\n      width: `${state.duration * 100}px`,\n      borderRadius: '5px'\n    }\n\n    return (\n      <div key={state.id} style={style}></div>\n    )\n\n  }\n\n  const Grid = (props) => {\n\n    let states = props.light.gridStates\n\n    return states.map((state,index) => {\n\n      return (\n\n        <Draggable key={`${state.id}-${props.light.name}`} draggableId={state.id} index={index} type=\"STATE\">\n          {(provided)=>(\n            <div ref={provided.innerRef} {...provided.draggableProps} {...provided.dragHandleProps} className=\"draggable-state\">\n              <HueState key={state.id} state={state}/>\n            </div>\n          )}\n        </Draggable>\n      )\n\n    })\n\n  }\n\n  const Light = (props) => {\n\n    const light = props.light\n\n    const style = {\n      width: '100px',\n      height: '100px',\n      display: 'flex',\n      justifyContent: 'center',\n      alignItems: 'center',\n      color: 'white',\n\n    }\n\n    return (\n      <div style={style} key={light.id}>\n        <h3>{light.name}</h3>\n      </div>\n    )\n\n  }\n\n  const Line = (props) => {\n\n    const style = {\n      display: 'flex',\n      borderBottom: '1px solid #2f2f2f',\n      backgroundColor: '#222'\n    }\n\n    const gridStyle = {\n      display: 'flex',\n      justifyContent: 'flex-start',\n      width: '100%'\n    }\n\n    return (\n      <div style={style} >\n        <Light light={props.light}/>\n        <Droppable droppableId={props.light.id} direction=\"horizontal\" type=\"STATE\">\n        {(provided) => (\n          <div style={gridStyle} ref={provided.innerRef} {...provided.droppableProps}>\n            <Grid light={props.light}/>\n            {provided.placeholder}\n          </div>\n        )}\n        </Droppable>\n      </div>\n    )\n\n  }\n\n  const LineStack = () => {\n\n    console.log(lines);\n\n    return lines.map((light, index) => {\n\n      return (\n        <Draggable key={light.name} draggableId={light.id} index={index}>\n          {(provided) => (\n            <div ref={provided.innerRef} {...provided.draggableProps} {...provided.dragHandleProps}>\n              <Line key={light.name} light={light}/>\n            </div>\n          )}\n        </Draggable>\n\n      )\n\n    })\n\n\n  }\n\n\n  const onDragEnd = (result) => {\n\n    const {destination, source, draggableId} = result;\n\n    if(!destination) {\n      return;\n    }\n\n    if(destination.droppableId === source.droppableId && destination.index === source.index) {\n      return;\n    }\n\n    if(source.droppableId === \"viewer\") {\n      const newLines = [...lines]\n      const light = newLines.find(light => light.id === destination.droppableId)\n      const c = currentEditorState;\n      let newState = new State(c.UIhue, c.UIsat, c.UIbri, c.transitiontime, c.on, c.duration);\n      light.gridStates.splice(destination.index, 0, newState);\n      setRef = [...newLines]\n      setLines([...newLines])\n      return;\n    }\n    \n    if(result.type === \"STATE\") {\n      \n      const newLines = [...lines];\n\n      const startingLine = newLines.find(light => light.id === source.droppableId);\n      const endingLine = newLines.find(light => light.id === destination.droppableId);\n\n      const draggedState = startingLine.gridStates.find(state => state.id === draggableId)\n\n      startingLine.gridStates.splice(source.index, 1);\n      endingLine.gridStates.splice(destination.index, 0, draggedState);\n\n      setRef = [...newLines];\n      setLines([...newLines])\n      \n    } else if (result.type === \"LINE\") {\n\n      const newLines = [...lines]\n\n      const draggedLine = newLines.splice(source.index, 1)[0];\n      newLines.splice(destination.index, 0, draggedLine);\n      \n      setRef = [...newLines];\n      setLines([...newLines]);\n      \n      \n    }\n  \n  }\n\n\n  return (\n    <div className=\"App\">\n    <DragDropContext onDragEnd={onDragEnd}>\n\n      <SetControls />\n      \n      <StateCreator lights={lines} didLoad={didLoad} />\n\n      <Droppable droppableId=\"linestack\" type=\"LINE\">\n      {(provided) => (\n        <div ref={provided.innerRef} {...provided.droppableProps}>\n          <LineStack/>\n          {provided.placeholder}\n        </div>\n      )}\n      </Droppable>\n\n    </DragDropContext>\n      \n    </div>\n  );\n}\n\n\nexport default Set;\n\n","/Users/barco/Desktop/sites/tests/dnd-tests/test6/hue-stage/client/src/Community/Community.js",[],"/Users/barco/Desktop/sites/tests/dnd-tests/test6/hue-stage/client/src/About/About.js",[],"/Users/barco/Desktop/sites/tests/dnd-tests/test6/hue-stage/client/src/Tutorials/Tutorials.js",[],"/Users/barco/Desktop/sites/tests/dnd-tests/test6/hue-stage/client/src/Auth/Signup.jsx",["81","82"],"/Users/barco/Desktop/sites/tests/dnd-tests/test6/hue-stage/client/src/Auth/Login.jsx",["83","84"],"/Users/barco/Desktop/sites/tests/dnd-tests/test6/hue-stage/client/src/Set/StateCreator.jsx",[],"/Users/barco/Desktop/sites/tests/dnd-tests/test6/hue-stage/client/src/Set/set-controls.jsx",["85","86","87","88"],"import React, {useState} from 'react';\nimport styled from 'styled-components';\nimport { set } from './data'\nimport { bridge } from './bridge'\n\n// play button\n// pause button\n// tempo\n\n// i.e. tempo = 140, beat happens at second measure (4 beats)\n\n// 1 measure has x beats\n// measure length in ms = /\n\n// tempo == beats in 60s\nlet tempo = 120;\nlet beatsPerMeasure = 4;\nlet beatValue = 4; // 1/4 (quarter)\n\n// get current time and every 50 ms check what objects have a play time before current time\n\n// after copying state and sending, delete those objects from the play time\n\n\n// render all states \n// when rendering states, make an array with objects\n// each object will have two properties, playTime and an array of all the states\n\n\n\n//disable all controls and dnd interface\n\n/*\n\n\n*/\n\nconst SetControls = () => {\n    \n\n    let stopButtonPressed = {state: false};\n    let [stopped, setStopped] = useState(false);\n    let [playing, setPlaying] = useState(false);\n    console.log(stopped);\n    \n    const play = () => {\n\n        if(!playing) {\n\n            setPlaying(true);\n\n            let playerQueues = [];\n        \n            set.map(light => {\n\n                let millisecondOcurrence = 0;\n\n                light.gridStates.map(state => {\n\n                    let millisecondDuration = ((60000/tempo) * beatsPerMeasure) * state.duration\n                    \n                    playerQueues.push({\n                        occurrenceTime: millisecondOcurrence,\n                        properties: {\n                            state: state,\n                            bridgeIndex: light.bridgeIndex\n                        }\n                    })\n                    \n                    millisecondOcurrence += millisecondDuration;\n\n                })\n\n            })\n\n            let startTime = new Date()\n\n            let player = setInterval(()=>{\n\n                let currentTime = new Date()\n                let elapsedTime = currentTime - startTime;\n                let queueCopy = [...playerQueues]\n\n                let messages = queueCopy.filter(state => {\n                    return state.occurrenceTime <= elapsedTime\n                });\n\n                messages.map(message => {\n                    bridge.send(message.properties.bridgeIndex, message.properties.state.data())\n                    //console.log(message.properties.state, message.properties.bridgeIndex)\n                })\n                \n                playerQueues = queueCopy.filter(state => state.occurrenceTime > elapsedTime );\n\n\n                console.log(stopButtonPressed.state)\n\n                if(playerQueues.length === 0 || stopButtonPressed.state) {\n                    stopButtonPressed.state = false;\n                    setPlaying(false);\n                    setStopped(false);\n                    clearInterval(player);\n                }\n\n            }, 50)\n\n        } \n\n    }\n\n    const stop = () => {\n\n        if(!stopped) {\n\n            stopButtonPressed.state = true;\n            setStopped(true);\n            console.log(stopped)\n            setPlaying(false);\n        }\n\n    }\n\n\n    return (\n        <Controls >\n            <Play playing={playing} onClick={play}>&#xFE0E;&#9654;&#xFE0E;</Play>\n            <Stop onClick={stop}/>\n        </Controls>\n    );\n};\n\nexport default SetControls;\n\nconst Controls = styled.div`\n    color: white; \n    display: flex;\n    justify-content: center;\n    align-items: center;\n`\n\nconst Play = styled.div`\n    width: 20px;\n    height: 20px;\n    margin: 20px;\n    font-size: 1.5rem;\n    cursor: pointer;\n    color: white;\n    :hover {\n        color: green;\n    }\n`\n\nconst Stop = styled.div`\n    width: 20px;\n    height: 20px;\n    margin: 20px;\n    cursor: pointer;\n    background-color: white;\n    :hover {\n        background-color: red;\n    }\n    :active {\n        background-color: darkred;\n    }\n`","/Users/barco/Desktop/sites/tests/dnd-tests/test6/hue-stage/client/src/Set/state-model.js",[],"/Users/barco/Desktop/sites/tests/dnd-tests/test6/hue-stage/client/src/Set/data.js",[],"/Users/barco/Desktop/sites/tests/dnd-tests/test6/hue-stage/client/src/Set/bridge.js",["89"],"import axios from 'axios';\nimport { set } from './data';\nimport Light from './state-model';\n\nlet bridgeUser = \"8SdmTqNxhLaIgHo28qv5JCeAjbsby0Hl7W9-jmKI\";\nlet bridgeIp = '';\n\nconst getBridgeIP = () => {\n    return axios.get('https://discovery.meethue.com').then(res => {\n        bridgeIp = res.data[0].internalipaddress\n        return res.data[0].internalipaddress\n    })\n}\n\nconst connectToBridge = (ip, user) => {\n  if(user) {\n      axios.get(`http://${ip}/api/${user}`).then(res => {\n      })\n  } else {\n      createUser(ip).then(res => {\n        axios.get(`http://${ip}/api/${res}`).then(res => {\n          console.log(res);\n        })\n      });\n  }\n}\n\nconst createUser = (ip) => {\n\n  let request = new Promise((resolve, reject) => {\n\n    let requestsMade = 0;\n    \n    let bridgeRequest = setInterval(()=>{\n      axios.post(`http://${ip}/api`, {devicetype: \"hue-stage-wep-app\"})\n        .then(res => {\n          if (!res.data[0].error) {\n            resolve(res.data[0].success.username);\n            requestsMade += 1;\n            clearInterval(bridgeRequest);\n          } else {\n            console.log(res.data[0].error)\n          }\n      }).catch(err => {\n        console.log(err);\n      })\n  \n      if(requestsMade > 15) {\n        reject('Unable to create user')\n        clearInterval(bridgeRequest);\n      }\n      \n    }, 2000);\n\n  })\n\n  return request;\n\n}\n\nexport const bridge = {\n    connect: async () => {\n        await getBridgeIP().then(ip => {\n            connectToBridge(ip, bridgeUser)\n        })\n    },\n\n    send(light, state) {\n        axios.put(`http://${bridgeIp}/api/${bridgeUser}/lights/${light}/state`, state)\n        .then(res => {\n            //console.log(res);\n        })\n    },\n\n    // sendMultiple() {\n    //   axios.put(`http://${bridgeIp}/api/${bridgeUser}/lights/${light}/state`, state)\n    //     .then(res => {\n    //         console.log(res);\n    //     })\n\n    // },\n\n    getLights: async () => {\n\n        let reachableLights = [];\n\n        await axios.get(`http://${bridgeIp}/api/${bridgeUser}/lights/`).then(res => {\n\n            let lights = Object.entries(res.data);\n            lights.map(light => {\n                if(light[1].state.reachable) {\n                    reachableLights.push(light);\n                }\n            })\n        })\n        \n        \n        return reachableLights;\n    },\n\n    loadLights() {\n\n        let reachableLights = [] \n        return this.getLights().then(res => {\n            reachableLights = res;\n            reachableLights.map(light => {\n                set.push(new Light(light[0], light[1].name, light[1].uniqueid, []))\n                return null;\n            })\n            return true;\n        })\n\n        \n    }\n\n\n}\n","/Users/barco/Desktop/sites/tests/dnd-tests/test6/hue-stage/client/src/Nav/Nav.js",["90","91"],"/Users/barco/Desktop/sites/tests/dnd-tests/test6/hue-stage/client/src/UserContext.js",[],"/Users/barco/Desktop/sites/tests/dnd-tests/test6/hue-stage/client/src/Dashboard/Dashboard.js",["92","93"],{"ruleId":"94","replacedBy":"95"},{"ruleId":"96","replacedBy":"97"},{"ruleId":"98","severity":1,"message":"99","line":15,"column":5,"nodeType":"100","messageId":"101","endLine":15,"endColumn":9},{"ruleId":"102","severity":1,"message":"103","line":38,"column":8,"nodeType":"104","endLine":38,"endColumn":10,"suggestions":"105"},{"ruleId":"98","severity":1,"message":"106","line":4,"column":10,"nodeType":"100","messageId":"101","endLine":4,"endColumn":14},{"ruleId":"98","severity":1,"message":"107","line":9,"column":16,"nodeType":"100","messageId":"101","endLine":9,"endColumn":23},{"ruleId":"98","severity":1,"message":"108","line":190,"column":7,"nodeType":"100","messageId":"101","endLine":190,"endColumn":13},{"ruleId":"98","severity":1,"message":"107","line":15,"column":16,"nodeType":"100","messageId":"101","endLine":15,"endColumn":23},{"ruleId":"98","severity":1,"message":"109","line":31,"column":10,"nodeType":"100","messageId":"101","endLine":31,"endColumn":17},{"ruleId":"98","severity":1,"message":"110","line":1,"column":39,"nodeType":"100","messageId":"101","endLine":1,"endColumn":48},{"ruleId":"98","severity":1,"message":"111","line":14,"column":10,"nodeType":"100","messageId":"101","endLine":14,"endColumn":14},{"ruleId":"98","severity":1,"message":"112","line":18,"column":5,"nodeType":"100","messageId":"101","endLine":18,"endColumn":14},{"ruleId":"113","severity":1,"message":"114","line":54,"column":27,"nodeType":"115","messageId":"116","endLine":54,"endColumn":29},{"ruleId":"113","severity":1,"message":"114","line":58,"column":44,"nodeType":"115","messageId":"116","endLine":58,"endColumn":46},{"ruleId":"113","severity":1,"message":"114","line":88,"column":38,"nodeType":"115","messageId":"116","endLine":88,"endColumn":40},{"ruleId":"113","severity":1,"message":"114","line":90,"column":30,"nodeType":"115","messageId":"116","endLine":90,"endColumn":32},{"ruleId":"98","severity":1,"message":"117","line":5,"column":8,"nodeType":"100","messageId":"101","endLine":5,"endColumn":16},{"ruleId":"98","severity":1,"message":"118","line":16,"column":9,"nodeType":"100","messageId":"101","endLine":16,"endColumn":17},{"ruleId":"98","severity":1,"message":"110","line":1,"column":39,"nodeType":"100","messageId":"101","endLine":1,"endColumn":48},{"ruleId":"98","severity":1,"message":"107","line":13,"column":16,"nodeType":"100","messageId":"101","endLine":13,"endColumn":23},"no-native-reassign",["119"],"no-negated-in-lhs",["120"],"no-unused-vars","'Page' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'user'. Either include it or remove the dependency array. You can also do a functional update 'setUser(u => ...)' if you only need 'user' in the 'setUser' call.","ArrayExpression",["121"],"'Link' is defined but never used.","'setUser' is assigned a value but never used.","'setRef' is assigned a value but never used.","'loading' is assigned a value but never used.","'useEffect' is defined but never used.","'user' is assigned a value but never used.","'beatValue' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'userIcon' is defined but never used.","'loadUser' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"122","fix":"123"},"Update the dependencies array to be: [user]",{"range":"124","text":"125"},[1017,1019],"[user]"]